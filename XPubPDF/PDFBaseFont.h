#ifndef __PDFBASEFONT_H__
#define __PDFBASEFONT_H__

#include "XPubPDFExpImp.h"
#include "pdfdef.h"
#include "PDFFontDesc.h"

#include <string>
#include <vector>
#include <map>


class CPDFDocument;
class CPDFTemplate;

#if defined(WIN32)
#pragma warning(disable : 4251)
#endif


class XPUBPDF_EXPORTIMPORT CPDFFontEncoding
{
public:
  ~CPDFFontEncoding();

  typedef enum
  {
    eNoEncoding = -1,
    eStandardEncoding = 0,
    eMacRomanEncoding = 1,
    eWinAnsiEncoding,
    ePDFDocEncoding,
    eMacExpertEncoding,
    eSymbolEncoding,
    eZapfDingbatsEncoding
  } eFontEncodingType;

  eFontEncodingType GetEncoding() {return m_eFontEncoding;};
  const char *GetEncodingStr();
  const char *GetCharCodeToGlyphName(int i_iChar);

  bool_a HasEncodingStream();
  bool_a GetEncodingStream(std::string& o_strEncoding);
  void SetEncodingObjNum(long i_lObjNum);
  long GetEncodingObjNum();


protected:
  friend class CPDFTemplate;
  friend class CPDFBaseFont;
  friend class CPDFTrueTypeFont;
  friend class CPDFType0Font;

  CPDFFontEncoding();

  void SetEncoding(eFontEncodingType i_eEncoding);
  void SetCharCodeToGlyphName(int i_iChar, std::string i_strGlyph);
  bool_a SetCodePage(long i_lCodePage);


private:

  eFontEncodingType m_eFontEncoding;
  std::map<int, std::string> m_vctCharCodeToGlyphName;
  long m_lObjNum;

};

struct glyph_info
{
  int m_iWidth;
  long m_lGidx;
  bool_a m_bUsed;
};


class XPUBPDF_EXPORTIMPORT CPDFBaseFont
{
public:
  ~CPDFBaseFont();

  static CPDFBaseFont *MakeFont(const char *i_pFontName, long i_lID, 
                                long i_lStyle = CPDFBaseFont::ePDFStandard,
                                long i_lCodePage = NOT_USED, CPDFDocument *i_pDoc = NULL);

  static short GetBaseFontIndex(const char *i_pBaseFont);

  typedef enum
  {
    eUnknown = -1,
    eType1Base14 = 0,
    eType1,
    eTrueType,
    eType0,
    eType1C,
    eMMType1,
    eType3,
    eCIDFontType0
  } ePDFFontType;

  typedef enum
  {
    ePDFDontUse          = -1,
    ePDFStandard         = 0x00,
    ePDFBold             = 0x01,
    ePDFItalic           = 0x02,
    ePDFUnderline        = 0x04,
    ePDFDoubleUnderline  = 0x08,
    ePDFStrikeout        = 0x10
  } ePDFFontStyle;


  ePDFFontType GetFontType() {return m_eFontType;};
  const char *GetFontName() {return m_strFontName.c_str();};
  const char *GetFontBaseName() {return m_strBaseName.c_str();};
  const char *GetFontResName() {return m_strResName.c_str();};
  int GetFontFirstChar() {return m_iFirstChar;};
  int GetFontLastChar() {return m_iLastChar;};
  CPDFFontDescriptor *GetFontDescriptor() {return m_pFontDescriptor;};
  CPDFFontEncoding *GetFontEncoding() {return m_pFontEncoding;};
  long GetFontID() {return m_lFontDocID;};
  long GetFontStyle() {return m_lFontStyle;};
  long GetFontCodePage() {return m_lCodePage;};


  virtual short GetFontUnderlineThickness();
  virtual short GetFontUnderlinePosition();
  virtual rec_a GetFontBBox();
  virtual long GetFontHeight(float i_fSize);
  virtual float GetFontAscent();
  virtual long GetFontAscentHeight(float i_fSize);
  virtual float GetFontDescent();
  virtual long GetFontDescentHeight(float i_fSize);
  virtual const char *GetToUnicode(std::string i_strChar);
  virtual size_t GetToUnicodeSize();
  virtual size_t GetToUnicodeLen();

  bool_a GetUnicodeValue(std::string& i_strIn, std::wstring& o_wstrOut);
  bool_a GetUnicodeValue(std::string& i_strIn, std::string& o_strOut);
  bool_a GetUnicodeValue(std::wstring& i_wstrIn, std::string& o_strOut);

  int GetAverageWidth();
  virtual float GetFontSpaceWidth(float i_fSize, float i_fHScaling = 100.f);
  virtual int GetFontCharWidth(CPDFChar i_Char);
  //virtual float GetStringWidth(std::string i_str, float i_fSize);
  virtual float GetFontStringWidth(CPDFString i_Str, float i_fSize, float i_fCharSpacing = 0.f,
                                    float i_fWordSpacing = 0.f, float i_fHScaling = 100.f);
  virtual float GetFontLastSpaceWidth(CPDFString& i_Str, float i_fSize, float i_fCharSpacing = 0.f,
                                    float i_fWordSpacing = 0.f, float i_fHScaling = 100.f);
  virtual float CalcFontHeight(std::string i_str, float i_fHeight, float i_fWidth);

  virtual float GetFontHexStringWidth(std::string i_str, float i_fSize, float i_fCharSpacing = 0.f,
                                  float i_fWordSpacing = 0.f, float i_fHScaling = 100.f);


  virtual bool_a GetFontStream(std::string &o_strFontStream);
  virtual bool_a GetFontStreamWinEncoding(std::string &o_strFontStream);
  long GetFontObjNum();
  void SetFontObjNum(long i_lObjNum);

  virtual void AssignObjNum(long &io_lObjNum);
  virtual bool_a GetEntireFontStream(std::vector<std::string> &o_vctFontStreams);

  virtual bool_a HasFontDescriptor();
  virtual bool_a GetDescriptorStream(std::string &o_strStream);
  virtual long GetFontDescriptorObjNum();
  virtual void SetFontDescriptorObjNum(long i_lObjNum);

  virtual bool_a HasFontEmbedStream();
  virtual bool_a GetEmbedStream(std::string& o_strEmbed);
  virtual long GetFontEmbedStreamObjNum();
  virtual void SetFontEmbedStreamObjNum(long i_lObjNum);
  virtual void SetEmbedded(bool_a i_bEmbed = true_a);

  virtual bool_a HasFontToUnicodeStream();
  virtual bool_a GetToUnicodeStream(std::string& o_strToUnicode);
  virtual long GetFontToUnicodeStreamObjNum();
  virtual void SetFontToUnicodeStreamObjNum(long i_lObjNum);

  virtual bool_a HasFontEncodingStream();
  virtual bool_a GetFontEncodingStream(std::string& o_strEncoding);
  virtual long GetFontEncodingObjNum();
  virtual void SetFontEncodingObjNum(long i_lObjNum);

  virtual bool_a GetGidxString(CPDFString& i_str, std::string& o_strOut);

  bool_a UsedInForm() {return m_bUsedInForm;};
  void SetUsedInForm(bool_a i_bUse = true_a) {m_bUsedInForm = i_bUse;};

  bool_a Compare(const char *i_pFontName, long i_lID, long i_lStyle, long i_lCodePage);

protected:
  friend class CPDFTemplate;

  CPDFBaseFont(const char *i_pFontName, long i_lID, 
                long i_lStyle = CPDFBaseFont::ePDFStandard,
                long i_lCodePage = NOT_USED, CPDFDocument *i_pDoc = NULL);

  short MapStandartFontStyle(short i_sIndex, long i_lStyle);
  CPDFFontDescriptor *MakeDescriptor(short i_sFontIndex);

  virtual bool_a Init();
  void ReadStdFont(short i_sDefFontIndex);


  void SetFontType(ePDFFontType i_eType);
  void SetFontBaseName(const char *i_pczBaseName);
  void SetFontResName(const char *i_pczResName);
  void SetFontFirstChar(int i_iFirstChar);
  void SetFontLastChar(int i_iLastChar);
  void SetCharWidth(int i_iChar, int i_iWidth);
  void SetFontDescriptor(CPDFFontDescriptor *i_pDesc);
  void SetFontEncoding(CPDFFontEncoding *i_pEnc);

  void SetToUnicode(std::string i_strFrom, std::string i_strTo);


  int GetComWidth(int i_iChar);// Used only in case of Type0 font in CPDFTemplate
  int GetDefComWidth();// Used only in case of Type0 font in CPDFTemplate
  void SetComWidth(int i_iChar, int i_iWidth);// Used only in case of Type0 font in CPDFTemplate
  void SetDefComWidth(int i_iWidth);// Used only in case of Type0 font in CPDFTemplate

protected://private:

  long m_lObjNum;

  ePDFFontType m_eFontType;
  std::string m_strFontName;
  std::string m_strBaseName;
  std::string m_strResName;
  int m_iFirstChar;
  int m_iLastChar;
  std::map<long, glyph_info> m_mapGlyphs;
//  std::map<long, long> m_mapUnicodeGidx;// ToUnicode key in font dictionary

  CPDFFontDescriptor *m_pFontDescriptor;
  CPDFFontEncoding *m_pFontEncoding;
  std::map<std::string, std::string> m_mapToUnicode;
  long m_lFontDocID;
  long m_lFontStyle;

  long m_lCodePage;
  CPDFDocument *m_pDoc;

  long m_lToUnicodeObjNum;

  std::map<int, int> m_mapComWidth;// Used only in case of Type0 font in CPDFTemplate
  int m_iDefComWidth;// Used only in case of Type0 font in CPDFTemplate

  bool_a m_bUsedInForm;
};



static const char czFONT_NAME[]                  = "XpubF";



static char *pczPDF_FONT_ENCODINGS[] =
{
  "StandardEncoding",
  "MacRomanEncoding",
  "WinAnsiEncoding",
  "PDFDocEncoding",
  "MacExpertEncoding",
  "SymbolEncoding",
  "ZapfDingbatsEncoding",
  NULL
};



// TO DO: check these values !!!


// 0  Helvetica
// 1  Helvetica-Bold
// 2  Helvetica-Oblique
// 3  Helvetica-BoldOblique
// 4  Times-Roman
// 5  Times-Bold
// 6  Times-Italic
// 7  Times-BoldItalic
// 8  Courier
// 9  Courier-Bold
// 10 Courier-Oblique
// 11 Courier-BoldOblique
// 12 Symbol
// 13 ZapfDingbats

static const short sSTANDART_FONT_COUNT = 14;

static const char *pczSTANDART_FONT_NAME[][2] =
{
  {"Helvetica", "Arial"},
  {"Helvetica-Bold", "Arial"},
  {"Helvetica-Oblique", "Arial"},
  {"Helvetica-BoldOblique", "Arial"},
  {"Times-Roman", "Times New Roman"},
  {"Times-Bold", "Times New Roman"},
  {"Times-Italic", "Times New Roman"},
  {"Times-BoldItalic", "Times New Roman"},
  {"Courier", "Courier"},
  {"Courier-Bold", "Courier"},
  {"Courier-Oblique", "Courier"},
  {"Courier-BoldOblique", "Courier"},
  {"Symbol", "Symbol"},
  {"ZapfDingbats", "Wingdings"},
};

static const short sSTANDART_FONT_UNDERLINEPOS[] =
{
  -97,
  -100,
  -100,
  -100,
  -100,
  -100,
  -100,
  -100,
  -100,
  -100,
  -100,
  -100,
  -100,
  -100
};

static const short sSTANDART_FONT_UNDERLINETHICKNESS[] =
{
  73,
  50,
  50,
  50,
  50,
  50,
  50,
  50,
  52,
  52,
  52,
  52,
  50,
  50
};

static const short sSTANDART_FONT_ASCENT[] =
{
  729,
  718,
  718,
  718,
  683,
  676,
  683,
  699,
  629,
  626,
  629,
  626,
  718,
  718
};

static const short sSTANDART_FONT_DESCENT[] =
{
  -219,
  -207,
  -207,
  -207,
  -217,
  -205,
  -205,
  -205,
  -157,
  -142,
  -157,
  -142,
  -207,
  -207
};

static const short STANDART_FONT_FONTBBOX[][4] =
{
  { -174, -220, 1001, 940 },
  { -170, -228, 1003, 962 },
  { -170, -225, 1116, 931 },
  { -174, -228, 1114, 962 },
  { -168, -218, 1000, 898 },
  { -168, -218, 1000, 935 },
  { -169, -217, 1010, 883 },
  { -200, -218, 996, 921 },
  { -6, -249, 639, 803},
  { -113, -250, 749, 801 },
  { -28, -250, 742, 805 },
  { -56, -250, 868, 801 },
  { -180, -293, 1090, 1010 },
  { -1, -143, 981, 820 }
};

static const short sSTANDART_FONT_WIDTH[][269] =
{
/* 0 Helvetica */
  {
    /*   0 */  278,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  10 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  20 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  30 */    0,    0,  278,  278,  355,  556,  556,  889,  667,  191, 
    /*  40 */  333,  333,  389,  584,  278,  333,  278,  278,  556,  556, 
    /*  50 */  556,  556,  556,  556,  556,  556,  556,  556,  278,  278, 
    /*  60 */  584,  584,  584,  556, 1015,  667,  667,  722,  722,  667, 
    /*  70 */  611,  778,  722,  278,  500,  667,  556,  833,  722,  778, 
    /*  80 */  667,  778,  722,  667,  611,  722,  667,  944,  667,  667, 
    /*  90 */  611,  278,  278,  278,  469,  556,  333,  556,  556,  500, 
    /* 100 */  556,  556,  278,  556,  556,  222,  222,  500,  222,  833, 
    /* 110 */  556,  556,  556,  556,  333,  500,  278,  556,  500,  722, 
    /* 120 */  500,  500,  500,  334,  260,  334,  584,  350,  558,  350, 
    /* 130 */  222,  556,  333, 1000,  556,  556,  333, 1000,  667,  333, 
    /* 140 */ 1000,  350,  611,  350,  350,  222,  222,  333,  333,  350, 
    /* 150 */  556, 1000,  333, 1000,  500,  333,  944,  350,  500,  667, 
    /* 160 */  278,  333,  556,  556,  556,  556,  260,  556,  333,  737, 
    /* 170 */  370,  556,  584,  333,  737,  333,  333,  584,  333,  333, 
    /* 180 */  333,  556,  537,  278,  333,  333,  365,  556,  834,  834, 
    /* 190 */  834,  611,  667,  667,  667,  667,  667,  667, 1000,  722, 
    /* 200 */  667,  667,  667,  667,  278,  278,  278,  278,  722,  722, 
    /* 210 */  778,  778,  778,  778,  778,  584,  778,  722,  722,  722, 
    /* 220 */  722,  667,  667,  611,  556,  556,  556,  556,  556,  556, 
    /* 230 */  889,  500,  556,  556,  556,  556,  278,  278,  278,  278, 
    /* 240 */  556,  556,  556,  556,  556,  556,  556,  584,  611,  556, 
    /* 250 */  556,  556,  556,  500,  556,  500,  556,  333,  333,  333, 
    /* 260 */  278,  500,  500,  167,  333,  222,  584,  333,  400 
  },
/* 1 Helvetica-Bold */
  {
    /*   0 */  278,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  10 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  20 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  30 */    0,    0,  278,  333,  474,  556,  556,  889,  722,  238, 
    /*  40 */  333,  333,  389,  584,  278,  333,  278,  278,  556,  556, 
    /*  50 */  556,  556,  556,  556,  556,  556,  556,  556,  333,  333, 
    /*  60 */  584,  584,  584,  611,  975,  722,  722,  722,  722,  667, 
    /*  70 */  611,  778,  722,  278,  556,  722,  611,  833,  722,  778, 
    /*  80 */  667,  778,  722,  667,  611,  722,  667,  944,  667,  667, 
    /*  90 */  611,  333,  278,  333,  584,  556,  333,  556,  611,  556, 
    /* 100 */  611,  556,  333,  611,  611,  278,  278,  556,  278,  889, 
    /* 110 */  611,  611,  611,  611,  389,  556,  333,  611,  556,  778, 
    /* 120 */  556,  556,  500,  389,  280,  389,  584,  350,  558,  350, 
    /* 130 */  278,  556,  500, 1000,  556,  556,  333, 1000,  667,  333, 
    /* 140 */ 1000,  350,  611,  350,  350,  278,  278,  500,  500,  350, 
    /* 150 */  556, 1000,  333, 1000,  556,  333,  944,  350,  500,  667, 
    /* 160 */  278,  333,  556,  556,  556,  556,  280,  556,  333,  737, 
    /* 170 */  370,  556,  584,  333,  737,  333,  333,  584,  333,  333, 
    /* 180 */  333,  611,  556,  278,  333,  333,  365,  556,  834,  834, 
    /* 190 */  834,  611,  722,  722,  722,  722,  722,  722, 1000,  722, 
    /* 200 */  667,  667,  667,  667,  278,  278,  278,  278,  722,  722, 
    /* 210 */  778,  778,  778,  778,  778,  584,  778,  722,  722,  722, 
    /* 220 */  722,  667,  667,  611,  556,  556,  556,  556,  556,  556, 
    /* 230 */  889,  556,  556,  556,  556,  556,  278,  278,  278,  278, 
    /* 240 */  611,  611,  611,  611,  611,  611,  611,  584,  611,  611, 
    /* 250 */  611,  611,  611,  556,  611,  556,  611,  333,  333,  333, 
    /* 260 */  278,  611,  611,  167,  333,  278,  584,  333,  400 
  },
/* 2 Helvetica-Oblique */
  {
    /*   0 */  278,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  10 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  20 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  30 */    0,    0,  278,  278,  355,  556,  556,  889,  667,  191, 
    /*  40 */  333,  333,  389,  584,  278,  333,  278,  278,  556,  556, 
    /*  50 */  556,  556,  556,  556,  556,  556,  556,  556,  278,  278, 
    /*  60 */  584,  584,  584,  556, 1015,  667,  667,  722,  722,  667, 
    /*  70 */  611,  778,  722,  278,  500,  667,  556,  833,  722,  778, 
    /*  80 */  667,  778,  722,  667,  611,  722,  667,  944,  667,  667, 
    /*  90 */  611,  278,  278,  278,  469,  556,  333,  556,  556,  500, 
    /* 100 */  556,  556,  278,  556,  556,  222,  222,  500,  222,  833, 
    /* 110 */  556,  556,  556,  556,  333,  500,  278,  556,  500,  722, 
    /* 120 */  500,  500,  500,  334,  260,  334,  584,  350,  558,  350, 
    /* 130 */  222,  556,  333, 1000,  556,  556,  333, 1000,  667,  333, 
    /* 140 */ 1000,  350,  611,  350,  350,  222,  222,  333,  333,  350, 
    /* 150 */  556, 1000,  333, 1000,  500,  333,  944,  350,  500,  667, 
    /* 160 */  278,  333,  556,  556,  556,  556,  260,  556,  333,  737, 
    /* 170 */  370,  556,  584,  333,  737,  333,  333,  584,  333,  333, 
    /* 180 */  333,  556,  537,  278,  333,  333,  365,  556,  834,  834, 
    /* 190 */  834,  611,  667,  667,  667,  667,  667,  667, 1000,  722, 
    /* 200 */  667,  667,  667,  667,  278,  278,  278,  278,  722,  722, 
    /* 210 */  778,  778,  778,  778,  778,  584,  778,  722,  722,  722, 
    /* 220 */  722,  667,  667,  611,  556,  556,  556,  556,  556,  556, 
    /* 230 */  889,  500,  556,  556,  556,  556,  278,  278,  278,  278, 
    /* 240 */  556,  556,  556,  556,  556,  556,  556,  584,  611,  556, 
    /* 250 */  556,  556,  556,  500,  556,  500,  556,  333,  333,  333, 
    /* 260 */  278,  500,  500,  167,  333,  222,  584,  333,  400 
  },
/* 3 Helvetica-BoldOblique */
  {
    /*   0 */  278,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  10 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  20 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  30 */    0,    0,  278,  333,  474,  556,  556,  889,  722,  238, 
    /*  40 */  333,  333,  389,  584,  278,  333,  278,  278,  556,  556, 
    /*  50 */  556,  556,  556,  556,  556,  556,  556,  556,  333,  333, 
    /*  60 */  584,  584,  584,  611,  975,  722,  722,  722,  722,  667, 
    /*  70 */  611,  778,  722,  278,  556,  722,  611,  833,  722,  778, 
    /*  80 */  667,  778,  722,  667,  611,  722,  667,  944,  667,  667, 
    /*  90 */  611,  333,  278,  333,  584,  556,  333,  556,  611,  556, 
    /* 100 */  611,  556,  333,  611,  611,  278,  278,  556,  278,  889, 
    /* 110 */  611,  611,  611,  611,  389,  556,  333,  611,  556,  778, 
    /* 120 */  556,  556,  500,  389,  280,  389,  584,  350,  558,  350, 
    /* 130 */  278,  556,  500, 1000,  556,  556,  333, 1000,  667,  333, 
    /* 140 */ 1000,  350,  611,  350,  350,  278,  278,  500,  500,  350, 
    /* 150 */  556, 1000,  333, 1000,  556,  333,  944,  350,  500,  667, 
    /* 160 */  278,  333,  556,  556,  556,  556,  280,  556,  333,  737, 
    /* 170 */  370,  556,  584,  333,  737,  333,  333,  584,  333,  333, 
    /* 180 */  333,  611,  556,  278,  333,  333,  365,  556,  834,  834, 
    /* 190 */  834,  611,  722,  722,  722,  722,  722,  722, 1000,  722, 
    /* 200 */  667,  667,  667,  667,  278,  278,  278,  278,  722,  722, 
    /* 210 */  778,  778,  778,  778,  778,  584,  778,  722,  722,  722, 
    /* 220 */  722,  667,  667,  611,  556,  556,  556,  556,  556,  556, 
    /* 230 */  889,  556,  556,  556,  556,  556,  278,  278,  278,  278, 
    /* 240 */  611,  611,  611,  611,  611,  611,  611,  584,  611,  611, 
    /* 250 */  611,  611,  611,  556,  611,  556,  611,  333,  333,  333, 
    /* 260 */  278,  611,  611,  167,  333,  278,  584,  333,  400 
  },
/* 4 Times-Roman */
  {
    /*   0 */  250,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  10 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  20 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  30 */    0,    0,  250,  333,  408,  500,  500,  833,  778,  180, 
    /*  40 */  333,  333,  500,  564,  250,  333,  250,  278,  500,  500, 
    /*  50 */  500,  500,  500,  500,  500,  500,  500,  500,  278,  278, 
    /*  60 */  564,  564,  564,  444,  921,  722,  667,  667,  722,  611, 
    /*  70 */  556,  722,  722,  333,  389,  722,  611,  889,  722,  722, 
    /*  80 */  556,  722,  667,  556,  611,  722,  722,  944,  722,  722, 
    /*  90 */  611,  333,  278,  333,  469,  500,  333,  444,  500,  444, 
    /* 100 */  500,  444,  333,  500,  500,  278,  278,  500,  278,  778, 
    /* 110 */  500,  500,  500,  500,  333,  389,  278,  500,  500,  722, 
    /* 120 */  500,  500,  444,  480,  200,  480,  541,  350,  500,  350, 
    /* 130 */  333,  500,  444, 1000,  500,  500,  333, 1000,  556,  333, 
    /* 140 */  889,  350,  611,  350,  350,  333,  333,  444,  444,  350, 
    /* 150 */  500, 1000,  333,  980,  389,  333,  722,  350,  444,  722, 
    /* 160 */  250,  333,  500,  500,  500,  500,  200,  500,  333,  760, 
    /* 170 */  276,  500,  564,  333,  760,  333,  333,  564,  300,  300, 
    /* 180 */  333,  500,  453,  250,  333,  300,  310,  500,  750,  750, 
    /* 190 */  750,  444,  722,  722,  722,  722,  722,  722,  889,  667, 
    /* 200 */  611,  611,  611,  611,  333,  333,  333,  333,  722,  722, 
    /* 210 */  722,  722,  722,  722,  722,  564,  722,  722,  722,  722, 
    /* 220 */  722,  722,  556,  500,  444,  444,  444,  444,  444,  444, 
    /* 230 */  667,  444,  444,  444,  444,  444,  278,  278,  278,  278, 
    /* 240 */  500,  500,  500,  500,  500,  500,  500,  564,  500,  500, 
    /* 250 */  500,  500,  500,  500,  500,  500,  611,  333,  333,  333, 
    /* 260 */  278,  556,  556,  167,  333,  278,  564,  333,  400 
  },
/* 5 Times-Bold */
  {
    /*   0 */  250,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  10 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  20 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  30 */    0,    0,  250,  333,  555,  500,  500, 1000,  833,  278, 
    /*  40 */  333,  333,  500,  570,  250,  333,  250,  278,  500,  500, 
    /*  50 */  500,  500,  500,  500,  500,  500,  500,  500,  333,  333, 
    /*  60 */  570,  570,  570,  500,  930,  722,  667,  722,  722,  667, 
    /*  70 */  611,  778,  778,  389,  500,  778,  667,  944,  722,  778, 
    /*  80 */  611,  778,  722,  556,  667,  722,  722, 1000,  722,  722, 
    /*  90 */  667,  333,  278,  333,  581,  500,  333,  500,  556,  444, 
    /* 100 */  556,  444,  333,  500,  556,  278,  333,  556,  278,  833, 
    /* 110 */  556,  500,  556,  556,  444,  389,  333,  556,  500,  722, 
    /* 120 */  500,  500,  444,  394,  220,  394,  520,  350,  500,  350, 
    /* 130 */  333,  500,  500, 1000,  500,  500,  333, 1000,  556,  333, 
    /* 140 */ 1000,  350,  667,  350,  350,  333,  333,  500,  500,  350, 
    /* 150 */  500, 1000,  333, 1000,  389,  333,  722,  350,  444,  722, 
    /* 160 */  250,  333,  500,  500,  500,  500,  220,  500,  333,  747, 
    /* 170 */  300,  500,  570,  333,  747,  333,  333,  570,  300,  300, 
    /* 180 */  333,  556,  540,  250,  333,  300,  330,  500,  750,  750, 
    /* 190 */  750,  500,  722,  722,  722,  722,  722,  722, 1000,  722, 
    /* 200 */  667,  667,  667,  667,  389,  389,  389,  389,  722,  722, 
    /* 210 */  778,  778,  778,  778,  778,  570,  778,  722,  722,  722, 
    /* 220 */  722,  722,  611,  556,  500,  500,  500,  500,  500,  500, 
    /* 230 */  722,  444,  444,  444,  444,  444,  278,  278,  278,  278, 
    /* 240 */  500,  556,  500,  500,  500,  500,  500,  570,  500,  556, 
    /* 250 */  556,  556,  556,  500,  556,  500,  667,  333,  333,  333, 
    /* 260 */  278,  556,  556,  167,  333,  278,  570,  333,  400 
  },
/* 6 Times-Italic */
  {
    /*   0 */  250,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  10 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  20 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  30 */    0,    0,  250,  333,  420,  500,  500,  833,  778,  214, 
    /*  40 */  333,  333,  500,  675,  250,  333,  250,  278,  500,  500, 
    /*  50 */  500,  500,  500,  500,  500,  500,  500,  500,  333,  333, 
    /*  60 */  675,  675,  675,  500,  920,  611,  611,  667,  722,  611, 
    /*  70 */  611,  722,  722,  333,  444,  667,  556,  833,  667,  722, 
    /*  80 */  611,  722,  611,  500,  556,  722,  611,  833,  611,  556, 
    /*  90 */  556,  389,  278,  389,  422,  500,  333,  500,  500,  444, 
    /* 100 */  500,  444,  278,  500,  500,  278,  278,  444,  278,  722, 
    /* 110 */  500,  500,  500,  500,  389,  389,  278,  500,  444,  667, 
    /* 120 */  444,  444,  389,  400,  275,  400,  541,  350,  500,  350, 
    /* 130 */  333,  500,  556,  889,  500,  500,  333, 1000,  500,  333, 
    /* 140 */  944,  350,  556,  350,  350,  333,  333,  556,  556,  350, 
    /* 150 */  500,  889,  333,  980,  389,  333,  667,  350,  389,  556, 
    /* 160 */  250,  389,  500,  500,  500,  500,  275,  500,  333,  760, 
    /* 170 */  276,  500,  675,  333,  760,  333,  333,  675,  300,  300, 
    /* 180 */  333,  500,  523,  250,  333,  300,  310,  500,  750,  750, 
    /* 190 */  750,  500,  611,  611,  611,  611,  611,  611,  889,  667, 
    /* 200 */  611,  611,  611,  611,  333,  333,  333,  333,  722,  667, 
    /* 210 */  722,  722,  722,  722,  722,  675,  722,  722,  722,  722, 
    /* 220 */  722,  556,  611,  500,  500,  500,  500,  500,  500,  500, 
    /* 230 */  667,  444,  444,  444,  444,  444,  278,  278,  278,  278, 
    /* 240 */  500,  500,  500,  500,  500,  500,  500,  675,  500,  500, 
    /* 250 */  500,  500,  500,  444,  500,  444,  556,  333,  333,  333, 
    /* 260 */  278,  500,  500,  167,  333,  278,  675,  333,  400 
  },
/* 7 Times-BoldItalic */
  {
    /*   0 */  250,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  10 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  20 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  30 */    0,    0,  250,  389,  555,  500,  500,  833,  778,  278, 
    /*  40 */  333,  333,  500,  570,  250,  333,  250,  278,  500,  500, 
    /*  50 */  500,  500,  500,  500,  500,  500,  500,  500,  333,  333, 
    /*  60 */  570,  570,  570,  500,  832,  667,  667,  667,  722,  667, 
    /*  70 */  667,  722,  778,  389,  500,  667,  611,  889,  722,  722, 
    /*  80 */  611,  722,  667,  556,  611,  722,  667,  889,  667,  611, 
    /*  90 */  611,  333,  278,  333,  570,  500,  333,  500,  500,  444, 
    /* 100 */  500,  444,  333,  500,  556,  278,  278,  500,  278,  778, 
    /* 110 */  556,  500,  500,  500,  389,  389,  278,  556,  444,  667, 
    /* 120 */  500,  444,  389,  348,  220,  348,  570,  350,  500,  350, 
    /* 130 */  333,  500,  500, 1000,  500,  500,  333, 1000,  556,  333, 
    /* 140 */  944,  350,  611,  350,  350,  333,  333,  500,  500,  350, 
    /* 150 */  500, 1000,  333, 1000,  389,  333,  722,  350,  389,  611, 
    /* 160 */  250,  389,  500,  500,  500,  500,  220,  500,  333,  747, 
    /* 170 */  266,  500,  606,  333,  747,  333,  333,  570,  300,  300, 
    /* 180 */  333,  576,  500,  250,  333,  300,  300,  500,  750,  750, 
    /* 190 */  750,  500,  667,  667,  667,  667,  667,  667,  944,  667, 
    /* 200 */  667,  667,  667,  667,  389,  389,  389,  389,  722,  722, 
    /* 210 */  722,  722,  722,  722,  722,  570,  722,  722,  722,  722, 
    /* 220 */  722,  611,  611,  500,  500,  500,  500,  500,  500,  500, 
    /* 230 */  722,  444,  444,  444,  444,  444,  278,  278,  278,  278, 
    /* 240 */  500,  556,  500,  500,  500,  500,  500,  570,  500,  556, 
    /* 250 */  556,  556,  556,  444,  500,  444,  611,  333,  333,  333, 
    /* 260 */  278,  556,  556,  167,  333,  278,  606,  333,  400 
  },
/* 8 Courier */
  {
    /*   0 */  600,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  10 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  20 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  30 */    0,    0,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  40 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  50 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  60 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  70 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  80 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  90 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 100 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 110 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 120 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 130 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 140 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 150 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 160 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 170 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 180 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 190 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 200 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 210 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 220 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 230 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 240 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 250 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 260 */  600,  600,  600,  600,  600,  600,  600,  600,  600 
  },
/* 9 Courier-Bold */
  {
    /*   0 */  600,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  10 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  20 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  30 */    0,    0,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  40 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  50 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  60 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  70 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  80 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  90 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 100 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 110 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 120 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 130 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 140 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 150 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 160 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 170 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 180 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 190 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 200 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 210 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 220 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 230 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 240 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 250 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 260 */  600,  600,  600,  600,  600,  600,  600,  600,  600 
  },
/* 10 Courier-Oblique */
  {
    /*   0 */  600,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  10 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  20 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  30 */    0,    0,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  40 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  50 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  60 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  70 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  80 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  90 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 100 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 110 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 120 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 130 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 140 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 150 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 160 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 170 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 180 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 190 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 200 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 210 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 220 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 230 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 240 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 250 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 260 */  600,  600,  600,  600,  600,  600,  600,  600,  600 
  },
/* 11 Courier-BoldOblique */
  {
    /*   0 */  600,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  10 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  20 */    0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
    /*  30 */    0,    0,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  40 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  50 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  60 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  70 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  80 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /*  90 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 100 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 110 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 120 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 130 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 140 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 150 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 160 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 170 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 180 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 190 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 200 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 210 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 220 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 230 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 240 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 250 */  600,  600,  600,  600,  600,  600,  600,  600,  600,  600, 
    /* 260 */  600,  600,  600,  600,  600,  600,  600,  600,  600 
  },
/* 12 Symbol */
  {
     250,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
       0,    0,  250,  333,  713,  500,  549,  833,  778,  439, 
     333,  333,  500,  549,  250,  549,  250,  278,  500,  500, 
     500,  500,  500,  500,  500,  500,  500,  500,  278,  278, 
     549,  549,  549,  444,  549,  722,  667,  722,  612,  611, 
     763,  603,  722,  333,  631,  722,  686,  889,  722,  722, 
     768,  741,  556,  592,  611,  690,  439,  768,  645,  795, 
     611,  333,  863,  333,  658,  500,  500,  631,  549,  549, 
     494,  439,  521,  411,  603,  329,  603,  549,  549,  576, 
     521,  549,  549,  521,  549,  603,  439,  576,  713,  686, 
     493,  686,  494,  480,  200,  480,  549,    0,    0,    0, 
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
       0,  620,  247,  549,  167,  713,  500,  753,  753,  753, 
     753, 1042,  987,  603,  987,  603,  400,  549,  411,  549, 
     549,  713,  494,  460,  549,  549,  549,  549, 1000,  603, 
    1000,  658,  823,  686,  795,  987,  768,  768,  823,  768, 
     768,  713,  713,  713,  713,  713,  713,  713,  768,  713, 
     790,  790,  890,  823,  549,  250,  713,  603,  603, 1042, 
     987,  603,  987,  603,  494,  329,  790,  790,  786,  713, 
     384,  384,  384,  384,  384,  384,  494,  494,  494,  494, 
       0,  329,  274,  686,  686,  686,  384,  384,  384,  384, 
     384,  384,  494,  494,  494,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,    0
  },
/* 13 ZapfDingbats */
  {
     250,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
       0,    0,  278,  974,  961,  974,  980,  719,  789,  790, 
     791,  690,  960,  939,  549,  855,  911,  933,  911,  945, 
     974,  755,  846,  762,  761,  571,  677,  763,  760,  759, 
     754,  494,  552,  537,  577,  692,  786,  788,  788,  790, 
     793,  794,  816,  823,  789,  841,  823,  833,  816,  831, 
     923,  744,  723,  749,  790,  792,  695,  776,  768,  792, 
     759,  707,  708,  682,  701,  826,  815,  789,  789,  707, 
     687,  696,  689,  786,  787,  713,  791,  785,  791,  873, 
     761,  762,  762,  759,  759,  892,  892,  788,  784,  438, 
     138,  277,  415,  392,  392,  668,  668,    0,    0,    0, 
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
       0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 
       0,  732,  544,  544,  910,  667,  760,  760,  776,  595, 
     694,  626,  788,  788,  788,  788,  788,  788,  788,  788, 
     788,  788,  788,  788,  788,  788,  788,  788,  788,  788, 
     788,  788,  788,  788,  788,  788,  788,  788,  788,  788, 
     788,  788,  788,  788,  788,  788,  788,  788,  788,  788, 
     788,  788,  894,  838, 1016,  458,  748,  924,  748,  918, 
     927,  928,  928,  834,  873,  828,  924,  924,  917,  930, 
     931,  463,  883,  836,  836,  867,  867,  696,  696,  874, 
       0,  874,  760,  946,  771,  865,  771,  888,  967,  888, 
     831,  873,  927,  970,  918,    0,    0,    0,    0,    0, 
       0,    0,    0,    0,    0,    0,    0,    0,    0
  }
};

#if defined(WIN32)
#pragma warning(default : 4251)
#endif // WIN32

#endif  /*  __PDFBASEFONT_H__  */
